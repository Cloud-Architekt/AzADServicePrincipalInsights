#change line 8 accordingly
#if you want to leverage parameters, add them in line 53

name: AzADServicePrincipalInsights

env:
  OutputPath: wiki
  ManagementGroups_s: managementGroupId #example multiple ManagementGroups: 'mgId0,mgId1'
  ScriptDir: pwsh #example: 'my folder\pwsh' or 'my folder/pwsh'
  ScriptPrereqFile: prerequisites.ps1
  ScriptFile: AzADServicePrincipalInsights.ps1
  #optional
  WebAppPublish: false #set to true and define the Web App details in the next 3 lines
  #WebAppSubscriptionId: ''
  #WebAppResourceGroup: ''
  #WebAppName: ''
  #ManagementGroupId: '' #used for finding the correct name to publish to website

on:
  #schedule:
  #  - cron:  '45 4,16 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  AzADServicePrincipalInsights:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Connect Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.CREDS}}
          enable-AzPSSession: true
          # CREDS looks like this:
          # {
          #   "tenantId": "<GUID>",
          #   "subscriptionId": "<GUID>",
          #   "clientId": "<GUID>",
          #   "clientSecret": "<GUID>"
          # }

      - name: Check prerequisites
        uses: azure/powershell@v1
        with:
          inlineScript: |
            . .\$($env:ScriptDir)\$($env:ScriptPrereqFile) -OutputPath ${env:OutputPath}
          azPSVersion: "latest"

      - name: Run AzADServicePrincipalInsights
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $ManagementGroupId = (${env:ManagementGroups_s}).split(',')
            . .\$($env:ScriptDir)\$($env:ScriptFile) -ScriptPath ${env:ScriptDir} -OutputPath ${env:OutputPath} -ManagementGroupId $ManagementGroupId
          azPSVersion: "latest"

      - name: Push AzADServicePrincipalInsights output to repository
        run: |
          git config --global user.email "AzADServicePrincipalInsightsGHActions@ghActions.com"
          git config --global user.name "$GITHUB_ACTOR"
          git config pull.rebase false
          git add --all
          git commit -m "$GITHUB_WORKFLOW $GITHUB_JOB"
          git push

      - name: Publish HTML to WebApp
        if: env.WebAppPublish == 'true'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $azAPICallConf = initAzAPICall -DebugAzAPICall $true
            $currentTask = "AzAPICall - Check if WebApp ($($env:WebAppName)) has Authentication enabled"
            $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($env:WebAppSubscriptionId)/resourceGroups/$($env:WebAppResourceGroup)/providers/Microsoft.Web/sites/$($env:WebAppName)/config/authsettings/list?api-version=2021-02-01"
            $method = 'POST'
            $request = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -listenOn 'Content'

            $authStatus = $request.properties.enabled
            Write-Host "WebApp ($($env:WebAppName)) has Authentication enabled: $authStatus"
            if ($authStatus) {
              try {
                if (Test-Path -Path "$($env:OutputPath)/AzADServicePrincipalInsights_$($env:ManagementGroupId).html") {
                  try {
                    Compress-Archive -Path "$($env:OutputPath)/AzADServicePrincipalInsights_$($env:ManagementGroupId).html" -DestinationPath "$($env:OutputPath)/AzADServicePrincipalInsights_$($env:ManagementGroupId).zip" -Force -ErrorAction Stop
                  }
                  catch {
                    throw 'Make sure that the ManagementGroupId variable in the AzADServicePrincipalInsights*.yml has correct casing (Linux!=linuX)'
                  }
                }

                $null = Select-AzSubscription -SubscriptionId $($env:WebAppSubscriptionId)
                if (Publish-AzWebApp -ResourceGroupName $($env:WebAppResourceGroup) -Name $($env:WebAppName) -ArchivePath "$($env:OutputPath)/AzADServicePrincipalInsights_$($env:ManagementGroupId).zip" -Force) {
                  Write-Host 'HTML published'
                }
              }
              catch {
                $_
                Write-Host 'HTML NOT published'
                Write-Host "RBAC Role 'Website Contributor' is required"
                exit 1
              }
            }
            else {
              Write-Host 'Assuming and insisting that you do not want to publish your tenant insights to the public'
              Write-Host "HTML NOT published. Please configure authentication on the webApp ($($env:WebAppName))"
              exit 1
            }
          azPSVersion: "latest"
